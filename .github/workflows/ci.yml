name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  BATS_VERSION: "1.10.0"

jobs:
  # Fast validation checks - fail fast on basic issues
  validate:
    name: Validate
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.check-version.outputs.changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for version checks

      - name: Validate files
        run: make validate

      - name: Validate manifest.json
        run: |
          # Save current manifest
          cp manifest.json manifest.json.orig
          
          # Generate manifest from source
          ./scripts/generate-manifest.sh
          
          # Compare manifests excluding timestamp
          # Remove timestamp lines before comparison
          sed '/"timestamp":/d' manifest.json.orig > manifest.orig.no-timestamp
          sed '/"timestamp":/d' manifest.json > manifest.new.no-timestamp
          
          # Check if files are identical (excluding timestamp)
          if diff manifest.orig.no-timestamp manifest.new.no-timestamp > /dev/null; then
            echo "✓ manifest.json is up-to-date"
            # Restore original to avoid timestamp-only changes
            mv manifest.json.orig manifest.json
          else
            echo "❌ manifest.json is out of sync with manifest-source.json"
            echo "Differences found:"
            diff manifest.orig.no-timestamp manifest.new.no-timestamp || true
            echo ""
            echo "Run './scripts/generate-manifest.sh' and commit the changes"
            exit 1
          fi

      - name: Cache ShellCheck
        uses: actions/cache@v4
        with:
          path: ~/.cache/shellcheck
          key: shellcheck-${{ runner.os }}-v0.9.0

      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@2.0.0
        with:
          check_together: 'yes'
          severity: error

      - name: Check version changes
        id: check-version
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          current_version=$(cat VERSION)
          if git rev-parse "v$current_version" >/dev/null 2>&1; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

  # Run tests in parallel across different OS
  test:
    name: Test
    needs: validate
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        test-suite: [unit, integration]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup test environment
        uses: ./.github/actions/setup-tests
        with:
          os: ${{ matrix.os }}

      - name: Run unit tests
        if: matrix.test-suite == 'unit'
        run: |
          bats tests/validation.bats
          bats tests/bump-version.bats
          bats tests/shellcheck.bats
          bats tests/version-consistency.bats

      - name: Run integration tests
        if: matrix.test-suite == 'integration'
        run: |
          # Set up test environment
          export CLAUDE_ENV_REPO_URL="file://$GITHUB_WORKSPACE"
          
          # Run installation tests
          bats tests/install.bats
          
          # Test actual installation scenarios
          export HOME="$GITHUB_WORKSPACE/test-home"
          mkdir -p "$HOME"
          
          # Test global installation
          bash install.sh --force
          test -d "$HOME/.claude"
          
          # Test local installation
          mkdir -p "$GITHUB_WORKSPACE/test-local" && cd "$GITHUB_WORKSPACE/test-local"
          bash "$GITHUB_WORKSPACE/install.sh" --local --force
          test -d ".claude"

      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-failures-${{ matrix.os }}-${{ matrix.test-suite }}
          path: |
            test-results/
            *.log

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy security scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Performance and metrics collection
  metrics:
    name: Collect Metrics
    needs: [validate, test]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Collect test metrics
        run: |
          echo "## Test Run Metrics" > metrics.md
          echo "- Date: $(date -u)" >> metrics.md
          echo "- Commit: ${{ github.sha }}" >> metrics.md
          echo "- Branch: ${{ github.ref }}" >> metrics.md
          echo "- Triggered by: ${{ github.event_name }}" >> metrics.md

      - name: Upload metrics
        uses: actions/upload-artifact@v4
        with:
          name: pipeline-metrics
          path: metrics.md

  # Automated release using semantic-release
  release:
    name: Release
    needs: [validate, test, security]
    if: |
      github.ref == 'refs/heads/main' && 
      github.event_name == 'push' && 
      needs.validate.outputs.should-release == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm install -g semantic-release @semantic-release/git @semantic-release/changelog @semantic-release/exec

      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: "semantic-release-bot"
          GIT_AUTHOR_EMAIL: "semantic-release-bot@martynus.net"
          GIT_COMMITTER_NAME: "semantic-release-bot"
          GIT_COMMITTER_EMAIL: "semantic-release-bot@martynus.net"
        run: |
          # For now, use the existing version-based release process
          # TODO: Migrate to full semantic-release in the future
          current_version=$(cat VERSION)
          
          # Create tag
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag -a "v$current_version" -m "Release version $current_version"
          git push origin "v$current_version"
          
          # Create GitHub release
          gh release create "v$current_version" \
            --title "Release $current_version" \
            --notes-file <(bash scripts/generate-release-notes.sh $current_version) \
            --verify-tag